// Gradle 빌드 파일: Spring Boot 프로젝트의 의존성, 플러그인, 태스크 설정을 정의
// 프로젝트명: mokuroku, 회원 관리 및 이메일 검증 기능 포함

// 플러그인 설정
plugins {
    // Java 플러그인: Java 프로젝트 빌드 지원
    id 'java'
    // Spring Boot 플러그인: Spring Boot 애플리케이션 빌드, 실행, 패키징 지원
    // id 'org.springframework.boot' version '3.2.5'
    id 'org.springframework.boot' version '3.5.3'
    // Spring 의존성 관리 플러그인: Spring Boot BOM(Bill of Materials)으로 의존성 버전 관리
    id 'io.spring.dependency-management' version '1.1.7'
    // JaCoCo 플러그인: 테스트 커버리지 측정 및 리포트 생성
    id 'jacoco'
}

// 프로젝트 그룹 ID: Maven 아티팩트 식별자
group = 'com.mokuroku'
// 프로젝트 버전: SNAPSHOT은 개발 중임을 나타냄
version = '0.0.1-SNAPSHOT'

// Java 설정: Java 17 사용
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// 컴파일 전용 의존성 설정: annotationProcessor를 compileOnly에 포함
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// 의존성 저장소: Maven Central에서 의존성 다운로드
repositories {
    mavenCentral()
}

// 프로젝트 의존성 정의
dependencies {
    // Spring Boot Data JPA: JPA와 Hibernate를 사용한 데이터베이스 액세스
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Spring Boot Data Redis: Redis 캐싱 및 데이터 저장 (재전송 횟수 캐싱)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Spring Boot Mail: JavaMailSender를 사용한 이메일 전송 (인증 이메일)
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // Spring Boot JDBC: JDBC를 통한 데이터베이스 연결
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    // Spring Boot Security: 인증 및 권한 관리 (OAuth2, JWT 지원)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Spring Boot Web: RESTful API 및 MVC 지원
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Spring Boot OAuth2 Client: 소셜 로그인 지원 (예: Google, Kakao)
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // Spring Boot Validation: DTO 검증 (@Valid, @NotBlank 등)
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Lettuce: Redis 클라이언트, spring-boot-starter-data-redis와 함께 사용
    implementation 'io.lettuce:lettuce-core'
    // JJWT API: JWT 토큰 생성 및 검증
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    // Springdoc OpenAPI: Swagger UI 및 API 문서화
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.7.0'

    // WebClient를 위한 WebFlux 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // MySQL 드라이버: MySQL 데이터베이스 연결, 런타임에만 필요
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    // JJWT 구현체: JWT 파싱 및 처리, 런타임에 필요
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    // JJWT Jackson: JWT JSON 처리, 런타임에 필요
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring Boot DevTools: 개발 중 자동 재시작 및 라이브 리로드
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Lombok: 보일러플레이트 코드 감소 (@Getter, @Setter, @Builder 등)
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // 테스트 의존성: JUnit 5, Mockito, Spring Test 포함
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Spring Security 테스트: 보안 관련 테스트 지원
    testImplementation 'org.springframework.security:spring-security-test'
    // JUnit Platform 런처: JUnit 5 테스트 실행
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// 테스트 태스크 설정: JUnit 5 플랫폼 사용, 테스트 후 JaCoCo 리포트 생성
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// JaCoCo 설정: 테스트 커버리지 측정 도구
jacoco {
    toolVersion = '0.8.8'
}

// JaCoCo 테스트 리포트 설정: XML 및 HTML 리포트 생성
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true // CI/CD 파이프라인에서 사용
        html.required = true // 개발자 확인용 HTML 리포트
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml') // 리포트 저장 경로
    }
}

// JaCoCo 커버리지 검증: 최소 80% 커버리지 요구
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8 // 테스트 커버리지 80% 이상 유지
            }
        }
    }
}